@model Negocio.Objetos.Cliente

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Create</title>

    @Scripts.Render("~/bundles/jqueryval")
</head>
@using (Html.BeginForm())
{
    <body>
        <!-- The Modal -->

        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Registrar Cliente</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">


                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.dni_clientes, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10 input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text"><i class="fas fa-user"></i></div>
                                </div>
                                @Html.EditorFor(model => model.dni_clientes, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.dni_clientes, "", new { @class = "text-danger" })
                                <div class="input-group-prepend">
                                    <div class="input-group-text"><a href="#" id="validardni"><i class="fas fa-search"></i></a></div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.apenom_cli, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10 input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text"><i class="fas fa-user"></i></div>
                                </div>
                                @Html.EditorFor(model => model.apenom_cli, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.apenom_cli, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.edad_cli, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10 input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text"><i class="fas fa-user"></i></div>
                                </div>
                                @Html.EditorFor(model => model.edad_cli, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.edad_cli, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.dni_usu, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10 input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text"><i class="fas fa-user"></i></div>
                                </div>
                                @Html.DropDownList("dni_usu", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.dni_usu, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.estado_cli, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10 input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text"><i class="fas fa-user"></i></div>
                                </div>
                                @Html.DropDownList("estado_cli", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.estado_cli, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    </div>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                    <input type="submit" value="Registar" class="btn btn-success">


                    <script>
                        $("#validardni").click(function (event) {
                            event.preventDefault();
                            let dni = $("#dni_clientes").val();
                            if (dni.length <= 7 || dni.length>=9) {
                                alert("El campo DNI esta vacio o no contiene 8 digitos");
                            } else {
                                // var dni=document.getElementById("etDni").value;
                                fetch('https://apiresfull.000webhostapp.com/apiessalud.php?dni=' + dni)
                                        .then(function (response) {
                                            return response.json();
                                        })
                                        .then(function (data) {
                                            var date = new Date();
                                            var nacimiento = data.DatosPerson[0].FechaNacimiento;
                                            var dateParts = nacimiento.split("/");
                                            var date2 = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);
                                            let edadactual = date.getFullYear() - date2.getFullYear();
                                            let nomape = data.DatosPerson[0].Nombres + " " + data.DatosPerson[0].ApellidoPaterno + " " + data.DatosPerson[0].ApellidoMaterno
                                            $("#apenom_cli").attr("value", nomape);
                                            $("#edad_cli").attr("value", edadactual);
                                        }).catch(function (err) {
                                            alert('fetch failed! ', err);
                                        });

                            }

                        });


                    </script>

                </div>

            </div>
        </div>

    </body>
}

</html>


